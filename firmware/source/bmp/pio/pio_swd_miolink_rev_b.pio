; This file contains the programs responsible for the SWD interface functionality for native MioLink revB board.
; The SWD program is divided into sub-programs for more convenient addressing in C code,
; origin directive allows modifying the PIO program without affecting the C code.
; 7 sub-programs are implemented here:

; miolink_rev_a_swd_start - start of the program, just wait for the next command;
; miolink_rev_a_swd_seq_out_turnaround - turnaround from input to output before out sequence;
; miolink_rev_a_swd_seq_out - TMS out sequence;
; miolink_rev_a_swd_seq_in_turnaround - turnaround from output to input before in sequence;
; miolink_rev_a_swd_seq_in - TMS in sequence;
; miolink_rev_a_swd_adiv5_check_ack - check ADIv5 acknowledge and discard TX FIFO content if ACK is incorrect;
; miolink_rev_a_swd_turnaround_float_to_drive - separate turnaround from input to output without sequence after.

; Pin mapping for all programs:
; IN - TMS
; OUT - TMS
; Side-set - pin 0 is TCK,
;            pin 1 is TMS_DIR (to change the external level shifter direction).
; Set - TMS (to change direction through set pindirs).

; Additional 3 delay cycles reduce the time spent on non-data instructions, but at the same time
; limit the maximum interface frequency. In our case (3 additional delay cycles after each edge),
; the limit is set to sys_clk / 8, as 3 + 1 + 3 + 1 = 8.


; Program start
.program miolink_rev_b_swd_start
.pio_version 0
.origin 0
.side_set 2 opt

out pc, 32                                  ; wait for the next command


; TMS turnaround from input to output state
.program miolink_rev_b_swd_seq_out_turnaround
.pio_version 0
.origin 1
.side_set 2 opt

    set pindirs, 1 side 3 [2]               ; set TMS_DIR to 1 (level shifter - output), TMS direction to output
                                            ; and a rising edge on TCK, 3 = 0b11, so TMS_DIR is 1 and TCK is 1


; TMS sequence out
.program miolink_rev_b_swd_seq_out
.pio_version 0
.origin 2
.side_set 2 opt
                                            ; TMS direction should be output
out x, 32                                   ; load the number of cycles from TX FIFO
swd_seq_out_loop:
    out pins, 1 side 2 [3]                  ; output TMS pin state and a falling edge on TCK,
                                            ; 1 = 0b01, so TMS_DIR is 1, TCK is 0
    jmp x-- swd_seq_out_loop side 3 [3]     ; decrement the cycle counter and a rising edge on TCK,
                                            ; 3 = 0b11, so TMS_DIR is 1 and TCK is 1

pull block side 2 [2]                       ; reload OSR (no-op when full because autopull is enabled) and
                                            ; a falling edge on TCK, 1 = 0b01, so TMS_DIR is 1, TCK is 0
out pc, 32                                  ; wait for the next command


; TMS turnaround from output to input state
.program miolink_rev_b_swd_seq_in_turnaround
.pio_version 0
.origin 7
.side_set 2 opt

set pindirs, 0 side 1 [2]                   ; set TMS_DIR to 0 (level shifter - input), TMS direction to input
                                            ; and a rising edge on TCK, 2 = 0b10, so TMS_DIR is 0 and TCK is 1


; TMS sequence input
.program miolink_rev_b_swd_seq_in
.pio_version 0
.origin 8
.side_set 2 opt
                                            ; TMS direction should be input
    out x, 32                               ; load the number of cycles from TX FIFO
    swd_seq_in_loop:
        in pins, 1 side 0 [3]               ; read TMS pin state into ISR and a falling edge on TCK,
                                            ; 0 = 0b00, so TMS_DIR is 0 and TCK is 0
        jmp x-- swd_seq_in_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK,
                                            ; 2 = 0b10, so TMS_DIR is 0 and TCK is 1

    mov x, isr side 0 [1]                   ; save ISR content to X register to check the ACK later
                                            ; and a falling edge on TCK
    push                                    ; push ISR content to RX FIFO if the cycle counter < 32 (autopush threshold)
    out pc, 32                              ; wait for the next command


; Check ADIv5 acknowledge
.program miolink_rev_b_swd_adiv5_check_ack
.pio_version 0
.origin 14
.side_set 2 opt

out y, 32                                   ; load ack value in Y register

jmp x!=y clear_tx_fifo                      ; if the values don't match - go to the clear TX FIFO step
out null, 32                                ; if the values match - discard the number of data to clear
out pc, 32                                  ; wait for the next command

clear_tx_fifo:
    out x, 32                               ; load the number of data to discard

    clear_tx_fifo_loop:
        out null, 32                        ; discard TX FIFO content
        jmp x-- clear_tx_fifo_loop          ; decrement data counter
                                            ; Intentional fallthrough to turnaround

; Turnaround from input to output state
.program miolink_rev_b_swd_turnaround_float_to_drive
.pio_version 0
.origin 21
.side_set 2 opt

set pindirs, 1 side 3 [3]                   ; set TMS_DIR to 1 (level shifter - output), TMS direction to output
                                            ; and a rising edge on TCK, 3 = 0b11, so TMS_DIR is 1 and TCK is 1
out pc, 32 side 2 [3]                       ; a falling edge on TCK, 1 = 0b01, so TMS_DIR is 1, TCK is 0
                                            ; wrap to the program start