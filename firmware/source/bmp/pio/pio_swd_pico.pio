; This file contains the programs responsible for the SWD interface functionality
; for MioLink running on a Pico/Pico W board.
; The SWD program is divided into sub-programs for more convenient addressing in C code,
; origin directive allows modifying the PIO program without affecting the C code.
; 7 sub-programs are implemented here:

; swd_in - a program that reads bits from the TMS pin;
; swd_in_parity - a program that reads bits from the TMS pin and returns the TMS pin to an output state at the end;
; swd_out - a program that outputs bits to the TMS pin;
; swd_adiv5_req - a program that sends a standard 8-bit ADIv5 request and reads the ACK.

; Pin mapping for all programs:
; IN - TMS
; OUT - TMS
; Side-set - TCK
; Set - TMS (to change direction through set pindirs).

; Additional 3 delay cycles reduce the time spent on non-data instructions, but at the same time
; limit the maximum interface frequency. In our case (3 additional delay cycles after each edge),
; the limit is set to sys_clk / 8, as 3 + 1 + 3 + 1 = 8.

; Autopull should be enabled, with a threshold of 32.
; Autopush also should be enabled, with a threshold of 32.


; Program start
.program pico_swd_start
.pio_version 0
.origin 0
.side_set 1 opt

out pc, 32                                  ; wait for the next command

; TMS turnaround from input to output state
.program pico_swd_seq_out_turnaround
.pio_version 0
.origin 1
.side_set 1 opt

set pindirs, 1 side 1 [2]                   ; set TMS direction to output and a rising edge on TCK


; TMS sequence out
.program pico_swd_seq_out
.pio_version 0
.origin 2
.side_set 1 opt
                                            ; TMS direction should be output and TMS_DIR state should be 1
out x, 32                                   ; load the number of cycles from TX FIFO
swd_seq_out_loop:
    out pins, 1 side 0 [3]                  ; output TMS pin state and a falling edge on TCK
    jmp x-- swd_seq_out_loop side 1 [3]     ; decrement the cycle counter and a rising edge on TCK

pull block side 0 [2]                       ; flush remaining data in osr and set falling edge on TCK
out pc, 32                                  ; wait for next command


; TMS turnaround from output to input state
.program pico_swd_seq_in_turnaround
.pio_version 0
.origin 7
.side_set 1 opt

set pindirs, 0 side 1 [2]                   ; set TMS direction to input and a rising edge on TCK


; TMS sequence input
.program pico_swd_seq_in
.pio_version 0
.origin 10
.side_set 1 opt
                                            ; TMS direction should be input, and TMS_DIR state should be 0
    out x, 32                               ; load number of cycles from TX FIFO
    swd_seq_in_loop:
        in pins, 1 side 0 [3]               ; read TMS pin state into ISR and a falling edge on TCK
        jmp x-- swd_seq_in_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK

    mov x, isr side 0 [1]                   ; save ISR content to X register to check the ACK later
                                            ; and a falling edge on TCK
    push                                    ; push isr content to RX FIFO for the case when cycle counter < 32 (autopush threshold)
    out pc, 32                              ; wait for next command


; Check ADIv5 acknowledge
.program pico_swd_adiv5_check_ack
.pio_version 0
.origin 16
.side_set 1 opt

out y, 32                                   ; load ack value in Y register

jmp x!=y clear_tx_fifo                      ; if the values don't match - go to the clear TX FIFO step
out null, 32                                ; if the values match - discard the number of data to clear
out pc, 32                                  ; wait for the next command

clear_tx_fifo:
    out x, 32                               ; load the number of data to discard

    clear_tx_fifo_loop:
        out null, 32                        ; discard TX FIFO content
        jmp x-- clear_tx_fifo_loop          ; decrement data counter
                                            ; Intentional fallthrough to turnaround


; Turnaround from input to output state
.program pico_swd_turnaround_float_to_drive
.pio_version 0
.origin 23
.side_set 1 opt

set pindirs, 1 side 1 [3]                   ; set TMS direction to output and a rising edge on TCK
out pc, 32 side 0     [3]                   ; a falling edge on TCK, 1 = 0b01, so TMS_DIR is 1, TCK is 0
                                            ; wrap to the program start